From 68a7305982d72369d6d6f2907ff62126710dec12 Mon Sep 17 00:00:00 2001
From: Muhaiminur Rahman <muhaiminurabir@gmail.com>
Date: Thu, 18 Nov 2021 16:01:30 +0600
Subject: [PATCH 5/7] check out page validation done

---
 .../com/misfit/opnmart/adapter/CartAdapter.kt |  10 +-
 .../misfit/opnmart/adapter/ProductAdapter.kt  |   5 +-
 .../com/misfit/opnmart/http/ApiService.java   |   1 -
 .../com/misfit/opnmart/http/Controller.kt     |   3 +-
 .../com/misfit/opnmart/model/Productdatum.kt  |   1 +
 .../misfit/opnmart/repository/ProductRepo.kt  |  47 ------
 .../com/misfit/opnmart/utility/Utility.kt     | 103 +------------
 .../com/misfit/opnmart/view/CheckoutPage.kt   | 137 ++++++++----------
 .../opnmart/viewmodel/ProductViewmodel.kt     |   2 -
 app/src/main/res/values/strings.xml           |   1 +
 10 files changed, 69 insertions(+), 241 deletions(-)
 delete mode 100644 app/src/main/java/com/misfit/opnmart/repository/ProductRepo.kt

diff --git a/app/src/main/java/com/misfit/opnmart/adapter/CartAdapter.kt b/app/src/main/java/com/misfit/opnmart/adapter/CartAdapter.kt
index 816ad26..54a86c4 100644
--- a/app/src/main/java/com/misfit/opnmart/adapter/CartAdapter.kt
+++ b/app/src/main/java/com/misfit/opnmart/adapter/CartAdapter.kt
@@ -9,23 +9,19 @@ import androidx.recyclerview.widget.RecyclerView
 import com.bumptech.glide.Glide
 import com.misfit.opnmart.R
 import com.misfit.opnmart.databinding.RecyclerCartBinding
-import com.misfit.opnmart.databinding.RecyclerProductBinding
 import com.misfit.opnmart.model.Productdatum
-import com.misfit.opnmart.utility.ProductClickListener
-import com.misfit.opnmart.view.DashboaredPage
 
-class CartAdapter(to: List<Productdatum>?, c: Context?, proClickListener: ProductClickListener) :
+class CartAdapter(to: List<Productdatum>?, c: Context?) :
     RecyclerView.Adapter<CartAdapter.Todo_View_Holder>() {
     private var context: Context? = c
     private var list: List<Productdatum>? = to
-    private var click: ProductClickListener? = proClickListener
 
 
     class Todo_View_Holder(view: RecyclerCartBinding) :
         RecyclerView.ViewHolder(view.getRoot()) {
         var productBinding: RecyclerCartBinding = view
         fun bind(s: Productdatum?) {
-            productBinding.setProduct(s)
+            productBinding.product = s
             productBinding.executePendingBindings()
         }
 
@@ -46,7 +42,7 @@ class CartAdapter(to: List<Productdatum>?, c: Context?, proClickListener: Produc
         try {
             holder.bind(bodyResponse)
             Glide.with(context!!)
-                .load(bodyResponse.imageUrl.toString())
+                .load(bodyResponse.imageUrl)
                 .into(holder.productBinding.cartImage)
         } catch (e: Exception) {
             Log.d("Error Line Number", Log.getStackTraceString(e))
diff --git a/app/src/main/java/com/misfit/opnmart/adapter/ProductAdapter.kt b/app/src/main/java/com/misfit/opnmart/adapter/ProductAdapter.kt
index a4cf8b2..5907877 100644
--- a/app/src/main/java/com/misfit/opnmart/adapter/ProductAdapter.kt
+++ b/app/src/main/java/com/misfit/opnmart/adapter/ProductAdapter.kt
@@ -11,7 +11,6 @@ import com.misfit.opnmart.R
 import com.misfit.opnmart.databinding.RecyclerProductBinding
 import com.misfit.opnmart.model.Productdatum
 import com.misfit.opnmart.utility.ProductClickListener
-import com.misfit.opnmart.view.DashboaredPage
 
 class ProductAdapter(to: List<Productdatum>?, c: Context?, proClickListener: ProductClickListener) :
     RecyclerView.Adapter<ProductAdapter.Todo_View_Holder>() {
@@ -45,13 +44,11 @@ class ProductAdapter(to: List<Productdatum>?, c: Context?, proClickListener: Pro
         try {
             holder.bind(bodyResponse)
             Glide.with(context!!)
-                .load(bodyResponse.imageUrl.toString())
+                .load(bodyResponse.imageUrl)
                 .into(holder.productBinding.comingImage)
             holder.productBinding.productAdd.setOnClickListener {
                 click?.onproductClickListener(bodyResponse)
             }
-            //holder.productBinding.productName.text = bodyResponse.name
-            //holder.productBinding.productPrice.text = bodyResponse.price.toString()
         } catch (e: Exception) {
             Log.d("Error Line Number", Log.getStackTraceString(e))
         }
diff --git a/app/src/main/java/com/misfit/opnmart/http/ApiService.java b/app/src/main/java/com/misfit/opnmart/http/ApiService.java
index 43d3989..2cd8e74 100644
--- a/app/src/main/java/com/misfit/opnmart/http/ApiService.java
+++ b/app/src/main/java/com/misfit/opnmart/http/ApiService.java
@@ -24,7 +24,6 @@ public interface ApiService {
     Call<List<Productdatum>> get_productlist();
 
     //3 get checkout information
-    //@FormUrlEncoded
     @Headers({"Content-Type:application/json", "Accept: application/json"})
     @POST("order")
     Call<Void> send_checkout(@Body HashMap sendCart);
diff --git a/app/src/main/java/com/misfit/opnmart/http/Controller.kt b/app/src/main/java/com/misfit/opnmart/http/Controller.kt
index ec18fd9..18e9b42 100644
--- a/app/src/main/java/com/misfit/opnmart/http/Controller.kt
+++ b/app/src/main/java/com/misfit/opnmart/http/Controller.kt
@@ -1,13 +1,12 @@
 package com.misfit.opnmart.http
 
+import okhttp3.OkHttpClient
 import retrofit2.Retrofit
 import retrofit2.converter.gson.GsonConverterFactory
-import okhttp3.OkHttpClient
 
 
 class Controller {
     companion object {
-
         //var BASE_URL = "https://c8d92d0a-6233-4ef7-a229-5a91deb91ea1.mock.pstmn.io/"
         var BASE_URL = "https://virtserver.swaggerhub.com/m-tul/opn-mobile-challenge-api/1.0.0/"
         var httpClient = OkHttpClient.Builder()
diff --git a/app/src/main/java/com/misfit/opnmart/model/Productdatum.kt b/app/src/main/java/com/misfit/opnmart/model/Productdatum.kt
index b38573b..d691630 100644
--- a/app/src/main/java/com/misfit/opnmart/model/Productdatum.kt
+++ b/app/src/main/java/com/misfit/opnmart/model/Productdatum.kt
@@ -2,6 +2,7 @@ package com.misfit.opnmart.model
 
 import com.google.gson.annotations.SerializedName
 import java.io.Serializable
+
 data class Productdatum(
     @SerializedName("name") val name: String,
     @SerializedName("price") val price: Int,
diff --git a/app/src/main/java/com/misfit/opnmart/repository/ProductRepo.kt b/app/src/main/java/com/misfit/opnmart/repository/ProductRepo.kt
deleted file mode 100644
index 7192f22..0000000
--- a/app/src/main/java/com/misfit/opnmart/repository/ProductRepo.kt
+++ /dev/null
@@ -1,47 +0,0 @@
-package com.misfit.opnmart.repository
-
-import android.util.Log
-import androidx.lifecycle.MutableLiveData
-import com.misfit.opnmart.http.Controller
-import com.misfit.opnmart.model.Productdatum
-import retrofit2.Call
-import retrofit2.Callback
-import retrofit2.Response
-
-
-class ProductRepo {
-
-    private val apiInterface = Controller.create()
-    val repoproductlist = MutableLiveData<List<Productdatum>>()
-    var progressbarObservable = MutableLiveData<Boolean>()
-    fun get_productlis() {
-        progressbarObservable.value = true
-        val call = apiInterface._productlist
-        call.enqueue(object : Callback<List<Productdatum>> {
-            override fun onResponse(
-                call: Call<List<Productdatum>>,
-                response: Response<List<Productdatum>>
-            ) {
-                Log.d("product list", response.toString())
-                if (response.isSuccessful && response.code() == 200) {
-                    Log.d("product list", response.body().toString())
-                    repoproductlist.postValue(response.body())
-                    progressbarObservable.postValue(false)
-                }
-            }
-
-            override fun onFailure(call: Call<List<Productdatum>>, t: Throwable) {
-                Log.d("Error", t.message.toString())
-                progressbarObservable.postValue(false)
-            }
-        })
-    }
-
-    fun getrepoproductData(): MutableLiveData<List<Productdatum>> {
-        return repoproductlist
-    }
-
-    fun getProgress(): MutableLiveData<Boolean> {
-        return progressbarObservable
-    }
-}
\ No newline at end of file
diff --git a/app/src/main/java/com/misfit/opnmart/utility/Utility.kt b/app/src/main/java/com/misfit/opnmart/utility/Utility.kt
index 97615bd..536fffb 100644
--- a/app/src/main/java/com/misfit/opnmart/utility/Utility.kt
+++ b/app/src/main/java/com/misfit/opnmart/utility/Utility.kt
@@ -1,65 +1,23 @@
 package com.misfit.opnmart.utility
 
-import android.app.Activity
-import android.app.ProgressDialog
 import android.content.Context
-import android.net.ConnectivityManager
 import android.os.StrictMode
 import android.os.StrictMode.ThreadPolicy
-import android.util.DisplayMetrics
 import android.util.Log
 import android.view.View
-import android.view.Window
-import android.view.WindowManager
 import android.view.inputmethod.InputMethodManager
-import android.widget.Button
-import android.widget.EditText
-import android.widget.TextView
 import android.widget.Toast
 import com.misfit.opnmart.R
 import java.text.SimpleDateFormat
 import java.util.*
 
-class Utility {
-    var context: Context? = null
-    var mProgressDialog: ProgressDialog? = null
-
-    fun Utility(context: Context?) {
-        this.context = context
+class Utility(private val context: Context) {
+    init {
         val policy = ThreadPolicy.Builder().permitAll().build()
         StrictMode.setThreadPolicy(policy)
         freeMemory()
     }
 
-    //================ Show Progress Dialog ===============
-    fun showProgress(isCancelable: Boolean, message: String?) {
-        hideProgress()
-        mProgressDialog = ProgressDialog(context, R.style.AppCompatAlertDialogStyle)
-        mProgressDialog!!.isIndeterminate = true
-        mProgressDialog!!.setCancelable(isCancelable)
-        mProgressDialog!!.setMessage(message)
-        mProgressDialog!!.show()
-    }
-
-    //================ Hide Progress Dialog ===============
-    fun hideProgress() {
-        try {
-            if (mProgressDialog != null && mProgressDialog!!.isShowing) {
-                mProgressDialog!!.dismiss()
-            }
-        } catch (e: Exception) {
-            Log.d("Error Line Number", Log.getStackTraceString(e))
-        }
-    }
-
-    fun isNetworkAvailable(): Boolean {
-        val manager =
-            context!!.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
-        val info = manager.activeNetworkInfo
-        return info != null && info.isConnected
-    }
-
-
     /*
     ================ Show Toast Message ===============
     */
@@ -67,78 +25,27 @@ class Utility {
         Toast.makeText(context, msg, Toast.LENGTH_LONG).show()
     }
 
-    /*
-    =============== Set Window FullScreen ===============
-    */
-    fun setFullScreen() {
-        val activity = context as Activity?
-        activity!!.requestWindowFeature(Window.FEATURE_NO_TITLE)
-        activity.window.setFlags(
-            WindowManager.LayoutParams.FLAG_FULLSCREEN,
-            WindowManager.LayoutParams.FLAG_FULLSCREEN
-        )
-    }
-
-    /*
-        ================ Get Screen Width ===============
-        */
-    fun getScreenRes(): HashMap<String, Int>? {
-        val map = HashMap<String, Int>()
-        val metrics = DisplayMetrics()
-        (context as Activity?)!!.windowManager.defaultDisplay.getMetrics(metrics)
-        val width = metrics.widthPixels
-        val height = metrics.heightPixels
-        map[Keyword.SCREEN_WIDTH] = width
-        map[Keyword.SCREEN_HEIGHT] = height
-        map[Keyword.SCREEN_DENSITY] = metrics.density.toInt()
-        return map
-    }
-
 
     /*
     ================ Log function ===============
      */
     fun logger(message: String?) {
-        Log.d(context!!.getString(R.string.app_name), message!!)
+        Log.d(context.getString(R.string.app_name), message!!)
         val currentTime = System.currentTimeMillis()
         val sdf = SimpleDateFormat("MM/dd/yyyy hh:mm:ss")
         val date = sdf.format(Date())
         //writeToFile(date+" -> "+message);
     }
 
-    /*
-    ================ Clear Text for EditText, Button, TextView ===============
-    */
-    fun clearText(view: Array<View?>) {
-        for (v in view) {
-            if (v is EditText) {
-                v.setText("")
-            } else if (v is Button) {
-                v.text = ""
-            } else if (v is TextView) {
-                v.text = ""
-            }
-        }
-    }
-
     /*
     ================ Hide Keyboard from Screen ===============
     */
     fun hideKeyboard(view: View) {
-        val imm = context!!.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
+        val imm = context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
         imm.hideSoftInputFromWindow(view.windowToken, 0)
     }
 
-
-    /*
-    ================ Show Keyboard to Screen ===============
-    */
-    fun showKeyboard() {
-        val imm = context!!.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
-        imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0)
-    }
-
-    fun freeMemory() {
+    private fun freeMemory() {
         System.runFinalization()
         Runtime.getRuntime().gc()
         System.gc()
diff --git a/app/src/main/java/com/misfit/opnmart/view/CheckoutPage.kt b/app/src/main/java/com/misfit/opnmart/view/CheckoutPage.kt
index a264129..5e3b20f 100644
--- a/app/src/main/java/com/misfit/opnmart/view/CheckoutPage.kt
+++ b/app/src/main/java/com/misfit/opnmart/view/CheckoutPage.kt
@@ -1,17 +1,10 @@
 package com.misfit.opnmart.view
 
-import android.app.Activity
-import android.app.Dialog
 import android.content.Context
 import android.content.Intent
 import android.os.Bundle
 import android.text.TextUtils
-import android.util.DisplayMetrics
 import android.util.Log
-import android.view.Window
-import android.widget.Button
-import android.widget.LinearLayout
-import android.widget.TextView
 import androidx.appcompat.app.AlertDialog
 import androidx.appcompat.app.AppCompatActivity
 import androidx.lifecycle.ViewModelProvider
@@ -23,21 +16,22 @@ import com.misfit.opnmart.adapter.CartAdapter
 import com.misfit.opnmart.databinding.ActivityCheckoutPageBinding
 import com.misfit.opnmart.model.Productdatum
 import com.misfit.opnmart.utility.Keyword
-import com.misfit.opnmart.utility.ProductClickListener
+import com.misfit.opnmart.utility.Utility
 import com.misfit.opnmart.viewmodel.CartViewmodel
 import com.misfit.opnmart.viewmodel.ViewmodelFactory
 import java.util.*
 import kotlin.collections.HashMap
 
 
-class CheckoutPage : AppCompatActivity(), ProductClickListener {
-    var adapter: CartAdapter? = null
-    var list = ArrayList<Productdatum>()
-    var context: Context? = null
+class CheckoutPage : AppCompatActivity() {
+    private var adapter: CartAdapter? = null
+    private var list = ArrayList<Productdatum>()
+    private var context: Context? = null
     private lateinit var binding: ActivityCheckoutPageBinding
-    var price: Int = 0
+    private var price: Int = 0
     private lateinit var viewModel: CartViewmodel
-    val dialog = ProgressDialog()
+    private val dialog = ProgressDialog()
+    private lateinit var utility: Utility
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -46,116 +40,99 @@ class CheckoutPage : AppCompatActivity(), ProductClickListener {
         try {
             dialog.isCancelable = false
             context = this
+            utility = Utility(this)
             val b = intent.extras
             val factory = ViewmodelFactory()
             viewModel = ViewModelProvider(this, factory).get(CartViewmodel::class.java)
             if (b != null && b.containsKey(Keyword.CARTPAGE)) {
                 list = b.getSerializable(Keyword.CARTPAGE) as ArrayList<Productdatum>
                 binding.checkoutOrderplace.setOnClickListener {
-                    if (!TextUtils.isEmpty(binding.checkoutAddress.text.toString())) {
-                        sendOrder(binding.checkoutAddress.text.toString())
+                    if (list != null && list.size > 0) {
+                        if (!TextUtils.isEmpty(binding.checkoutAddress.text.toString())) {
+                            sendOrder(binding.checkoutAddress.text.toString())
+                        } else {
+                            binding.checkoutAddress.error =
+                                resources.getString(R.string.address_string)
+                            binding.checkoutAddress.requestFocusFromTouch()
+                        }
                     } else {
-                        binding.checkoutAddress.setError(getResources().getString(R.string.address_string));
-                        binding.checkoutAddress.requestFocusFromTouch();
+                        utility.showToast(
+                            resources.getString(R.string.cart_string)
+                        )
                     }
                 }
-                initial_list()
+                initialList()
             }
         } catch (e: Exception) {
-            Log.d("Error Line Number", Log.getStackTraceString(e));
+            Log.d("Error Line Number", Log.getStackTraceString(e))
         }
     }
 
-    private fun initial_list() {
-        adapter = CartAdapter(list, context, this)
+    private fun initialList() {
+        adapter = CartAdapter(list, context)
         binding.checkoutProductlist.layoutManager = LinearLayoutManager(this)
         binding.checkoutProductlist.itemAnimator = DefaultItemAnimator()
         binding.checkoutProductlist.adapter = adapter
         for (cart in list) {
-            price = price + cart.price
+            price += cart.price
         }
-        binding.checkoutTotal.setText(
-            StringBuilder(context?.resources?.getText(R.string.totalprice_string)).append(
+        binding.checkoutTotal.text =
+            StringBuilder(resources.getString(R.string.totalprice_string)).append(
                 price.toString()
             )
-        )
         observer()
     }
 
-    fun observer() {
-        viewModel.progressbarObservable.observe(this, androidx.lifecycle.Observer {
+    private fun observer() {
+        viewModel.progressbarObservable.observe(this, {
             if (it != null) {
                 if (it.loading) {
-                    showNoticeDialog(true)
+                    showLoader(true)
                 } else {
-                    showNoticeDialog(false)
+                    showLoader(false)
                     if (!it.loading && it.sucess) {
-                        showDialog(context?.resources?.getString(R.string.suc_string), 1)
+                        showInfo(context?.resources?.getString(R.string.suc_string).toString(), 1)
                     } else if (!it.loading && !it.sucess) {
-                        showDialog(context?.resources?.getString(R.string.try_string), 2)
+                        showInfo(context?.resources?.getString(R.string.try_string).toString(), 2)
                     }
                 }
             }
         })
     }
 
-    fun sendOrder(address: String) {
+    private fun sendOrder(address: String) {
         val gson = Gson()
-        val cartlist: String = gson.toJson(list)
+        val cartList: String = gson.toJson(list)
         val jsonParams = HashMap<String, Any>()
-        jsonParams.put("products", cartlist)
-        jsonParams.put("delivery_address", address)
-        Log.d("cart", jsonParams.toString())
+        jsonParams["products"] = cartList
+        jsonParams["delivery_address"] = address
+        utility.logger("cart" + jsonParams.toString())
         viewModel.create_order(jsonParams)
     }
 
-    override fun onproductClickListener(data: Productdatum) {
-
-    }
-
-    fun showDialog(message: String?, i: Int) {
-        val screen: java.util.HashMap<String, Int> = getScreenRes()!!
-        val width = screen[Keyword.SCREEN_WIDTH]!!
-        val height = screen[Keyword.SCREEN_HEIGHT]!!
-        val mywidth = width / 10 * 9
-        val dialog = Dialog(context!!)
-        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)
-        dialog.window!!.setBackgroundDrawableResource(android.R.color.transparent)
-        dialog.setContentView(R.layout.dialog_toast)
-        val tvMessage = dialog.findViewById<TextView>(R.id.tv_message)
-        val btnOk = dialog.findViewById<Button>(R.id.btn_ok)
-        tvMessage.text = message
-        val ll = dialog.findViewById<LinearLayout>(R.id.dialog_layout_size)
-        val params = ll.layoutParams as LinearLayout.LayoutParams
-        params.height = LinearLayout.LayoutParams.WRAP_CONTENT
-        params.width = mywidth
-        ll.layoutParams = params
-        btnOk.setOnClickListener {
-            dialog.dismiss()
-            if (i == 1) {
-                val i = baseContext.packageManager
-                    .getLaunchIntentForPackage(baseContext.packageName)
-                i!!.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
-                startActivity(i)
-                finish()
+    private fun showInfo(show: String, i: Int) {
+        val alertDialog: AlertDialog = this.let {
+            val builder = AlertDialog.Builder(it)
+            builder.setTitle(show)
+            builder.apply {
+                setPositiveButton(R.string.confirm_string) { dialog, _ ->
+                    // User clicked OK button
+                    dialog.dismiss()
+                    if (i == 1) {
+                        val intent = baseContext.packageManager
+                            .getLaunchIntentForPackage(baseContext.packageName)
+                        intent!!.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
+                        startActivity(intent)
+                        finish()
+                    }
+                }
             }
+            builder.create()
         }
-        dialog.setCancelable(false)
-        dialog.show()
+        alertDialog.show()
     }
 
-    fun getScreenRes(): java.util.HashMap<String, Int>? {
-        val map = java.util.HashMap<String, Int>()
-        val metrics = DisplayMetrics()
-        (context as Activity).windowManager.defaultDisplay.getMetrics(metrics)
-        val width = metrics.widthPixels
-        val height = metrics.heightPixels
-        map[Keyword.SCREEN_WIDTH] = width
-        map[Keyword.SCREEN_HEIGHT] = height
-        map[Keyword.SCREEN_DENSITY] = metrics.density.toInt()
-        return map
-    }
-    fun showNoticeDialog(show: Boolean) {
+    private fun showLoader(show: Boolean) {
         if (show) {
             dialog.show(supportFragmentManager, "NoticeDialogFragment")
         } else {
diff --git a/app/src/main/java/com/misfit/opnmart/viewmodel/ProductViewmodel.kt b/app/src/main/java/com/misfit/opnmart/viewmodel/ProductViewmodel.kt
index aaf41b0..f21a1f9 100644
--- a/app/src/main/java/com/misfit/opnmart/viewmodel/ProductViewmodel.kt
+++ b/app/src/main/java/com/misfit/opnmart/viewmodel/ProductViewmodel.kt
@@ -6,7 +6,6 @@ import androidx.lifecycle.ViewModel
 import com.misfit.opnmart.http.Controller
 import com.misfit.opnmart.model.Productdatum
 import com.misfit.opnmart.model.Storedata
-import com.misfit.opnmart.repository.ProductRepo
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Response
@@ -18,7 +17,6 @@ class ProductViewmodel : ViewModel() {
     var productlst = MutableLiveData<List<Productdatum>>()
     var catlist = MutableLiveData<List<Productdatum>>()
     var newlist = arrayListOf<Productdatum>()
-    var productrepo = ProductRepo()
 
     fun get_productlis() {
         progressbarObservable.postValue(true)
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 008531c..0fc69b5 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -16,5 +16,6 @@
     <string name="suc_string">Order Placed</string>
     <string name="try_string">Try Again Later</string>
     <string name="address_string">Enter Delivery Address</string>
+    <string name="cart_string">Select atleast one Product</string>
 
 </resources>
\ No newline at end of file
-- 
2.32.0.windows.2

